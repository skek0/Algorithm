#include <iostream>

using namespace std;

const int& Greedy(int n)
{
	int coin[4] = { 1000, 100, 50, 10 };

	for (int i = 0; i < 4; i++)
	{
		int count = 0;
		while (n - coin[i] >= 0)
		{
			n -= coin[i];
			count++;
		}
		cout << coin[i] << "원\t" << count << "개" << endl;
	}

}

int main()
{
#pragma region Greedy 알고리즘
	// 최적의 해를 구하는데 사용되는 근사적인 방법
	// 여러개의 해중 하나를 결정해야 할 때마다 
	// 그 순간에 최적인 것을 선택해 나가는 방식으로 진행하여
	// 해답을 구하는 알고리즘

	// 1.탐욕 선택 속성
	// 각 단계에서 '최적의 선택'을 했을때
	// 전체 문제에 대한 최적의 해를 구할 수 있는 경우

	// 2.최적 부분 구조
	// 전체 문제의 최적의 해가 '부분 문제의 최적의 해'로 
	// 구성될 수 있는 경우

	// 그리디 알고리즘 단계

	// 1. 문제의 최적해 구조를 결정
	// 2. 문제의 구조에 맞게 선택 절차를 정의
	// 3. 선택 절차에 따라 선택 수행
	// 4. 선택된 해가 문제의 조건을 만족하는지 검사
	// 5. 조건을 만족하지 않으면 해당 해를 제외
	// 6. 모든 선택이 완료되면 해답을 검사
	// 7. 조건을 만족하지 않으면 해답으로 인정되지 않음

	int change = 1370;
#pragma endregion


	return 0;
}